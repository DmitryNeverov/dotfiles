# enable autocompletion, store cache in a folder instead of cluttering $HOME
export ZSH_CACHE_DIR="$HOME/.zsh_cache"
mkdir -p "$ZSH_CACHE_DIR"
autoload -U compinit
compinit

# enable colours
autoload -Uz colors
colors

# enable colours for ls; good converter https://geoff.greer.fm/lscolors/
export CLICOLOR=1
export LSCOLORS="GxFxBxDxCxegedabagacad"  # 11 chars for BSD ls (ships with macOS)
export LS_COLORS="di=1;36:ln=1;35:so=1;31:pi=1;33:ex=1;32:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43" # equivalent

# Highlight selected completion option
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# make version control system information available
# https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Version-Control-Information
autoload -Uz vcs_info
zstyle ':vcs_info:git:*' check-for-changes true  # enables %c and %u, can be expensive
zstyle ':vcs_info:git:*' stagedstr '%F{yellow}'  # change term colour instead of printing 'S'
zstyle ':vcs_info:git:*' unstagedstr '%F{red}'   # change term colour instead of printing 'U'

# "[branch] repo" style, with branch colour modified by changes; %f resets colour
zstyle ':vcs_info:git:*' formats '[%F{green}%c%u%b%f] %r'
zstyle ':vcs_info:git:*' actionformats '[%F{green}%c%u%b%f|%a] %r'

# ensure prompt updates dynamically
setopt prompt_subst

# main function to run before showing prompts
precmd () { vcs_info }

RPROMPT='${vcs_info_msg_0_}'        # just the string pre-formatted by vcs_info
PROMPT='%F{cyan}%40<..<%~%f %# '    # path in yellow, truncated to 40 chars

# zsh plugins
#   first, `brew install antidote`
source /opt/homebrew/opt/antidote/share/antidote/antidote.zsh
zstyle ':antidote:bundle' use-friendly-names on
antidote load

# Incremental search up or down from history
bindkey "^[[A" history-beginning-search-backward
bindkey "^[[B" history-beginning-search-forward

# Shift-tab for reverse completion navigation
bindkey '^[[Z' reverse-menu-complete

alias la="ls -la"
alias ll="ls -l"

# tell GPG about the terminal, for terminal-based pinentry
# although usually we use GUI one like `pinentry-mac`
export GPG_TTY=$(tty)

# start in tmux by default
if command -v tmux >/dev/null 2>&1; then
  if [ -z "$TMUX" ]; then
    tmux attach-session -t main || tmux new-session -s main
  fi
fi
